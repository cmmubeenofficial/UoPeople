import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

class GradeAssignment {
    private Student student;
    private Course course;
    private int grade;

    public GradeAssignment(Student student, Course course, int grade) {
        this.student = student;
        this.course = course;
        this.grade = grade;
    }

    public Student getStudent() {
        return student;
    }

    public Course getCourse() {
        return course;
    }

    public int getGrade() {
        return grade;
    }

    @Override
    public String toString() {
        return "Student: " + student.getName() + ", Course: " + course.getName() + ", Grade: " + grade;
    }
}

// Define the Student class
class Student {
    private String name;
    private int id;
    private List<Course> enrolledCourses;
    private List<Integer> grades;

    // Constructor
    public Student(String name, int id) {
        this.name = name;
        this.id = id;
        this.enrolledCourses = new ArrayList<>();
        this.grades = new ArrayList<>();
    }

    // Getter methods for name and id
    public String getName() {
        return name;
    }

    public int getId() {
        return id;
    }

    // Getter method for enrolledCourses
    public List<Course> getEnrolledCourses() {
        return enrolledCourses;
    }

    // Method to enroll students in courses
    public void enrollCourse(Course course) {
        enrolledCourses.add(course);
        grades.add(0); // Initialize grade to 0 when enrolling in a course
    }

    // Method to assign grades to students
    public void assignGrade(Course course, int grade) {
        int index = enrolledCourses.indexOf(course);
        if (index != -1) {
            grades.set(index, grade); // Update grade for the corresponding course
        } else {
            System.out.println("Student is not enrolled in the specified course.");
        }
    }

    // Method to retrieve the grade for a specific course
    public int getGradeForCourse(Course course) {
        int index = enrolledCourses.indexOf(course);
        if (index != -1) {
            return grades.get(index);
        } else {
            System.out.println("Student is not enrolled in the specified course.");
            return -1; // Return a default value indicating grade not found
        }
    }
}

// Define the Course class
class Course {
    private String courseCode;
    private String name;
    private int maxCapacity;
    private static int totalEnrolledStudents = 0;

    // Constructor
    public Course(String courseCode, String name, int maxCapacity) {
        this.courseCode = courseCode;
        this.name = name;
        this.maxCapacity = maxCapacity;
    }

    // Getter methods
    public String getCourseCode() {
        return courseCode;
    }

    public String getName() {
        return name;
    }

    public int getMaxCapacity() {
        return maxCapacity;
    }

    // Static method to retrieve the total number of enrolled students
    public static int getTotalEnrolledStudents() {
        return totalEnrolledStudents;
    }

    // Public method to increment the total enrolled students count
    public static void incrementTotalEnrolledStudents() {
        totalEnrolledStudents++;
    }
}

// Define the CourseManagement class
class CourseManagement {
    private static List<Course> courses = new ArrayList<>();
    private static List<Student> students = new ArrayList<>();
    private static List<GradeAssignment> gradeAssignments = new ArrayList<>();

    public static void addCourse(String courseCode, String name, int maxCapacity) {
        Course course = new Course(courseCode, name, maxCapacity);
        courses.add(course);
    }

    public static void enrollStudent(Student student, Course course) {
        if (course.getMaxCapacity() > Course.getTotalEnrolledStudents()) {
            student.enrollCourse(course);
            Course.incrementTotalEnrolledStudents(); // Update the total enrolled students count
            students.add(student);
            System.out.println("Student enrolled successfully in " + course.getName());
        } else {
            System.out.println("Course capacity reached.");
        }
    }

    public static void assignGrade(Student student, Course course, int grade) {
        student.assignGrade(course, grade);
        GradeAssignment gradeAssignment = new GradeAssignment(student, course, grade);
        gradeAssignments.add(gradeAssignment);
        System.out.println(
                "Grade assigned successfully to student " + student.getName() + " for course " + course.getName());
    }

    public static void calculateOverallGrade(Student student) {
        List<Course> courses = student.getEnrolledCourses();
        int totalGrade = 0;

        System.out.println("Grades for each course:");

        for (Course course : courses) {
            int courseGrade = student.getGradeForCourse(course);
            totalGrade += courseGrade;

            System.out.println("Course: " + course.getName() + ", Grade: " + courseGrade);
        }

        System.out.println("Overall course grade for student " + student.getName() + ": " + totalGrade);
    }

    public static List<Course> getCourses() {
        return courses;
    }

    public static List<Student> getStudents() {
        return students;
    }

    // Method to retrieve and display all grade assignments
    public static void displayGradeAssignments() {
        System.out.println("All Grade Assignments:");
        for (GradeAssignment assignment : gradeAssignments) {
            System.out.println(assignment);
        }
    }
}

// Define the AdministratorInterface class
class AdministratorInterface {
    private static Scanner scanner = new Scanner(System.in);

    public static void displayMenu() {
        boolean exit = false;
        while (!exit) {
            System.err.println("");
            System.out.println("Welcome to the Course Enrollment and Grade Management System");
            System.out.println("1. Add a new course");
            System.out.println("2. Enroll a student");
            System.out.println("3. Assign grade to a student");
            System.out.println("4. Calculate overall course grade for a student");
            System.out.println("5. Display all grade assignments");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            try {
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        addNewCourse();
                        break;
                    case 2:
                        enrollStudent();
                        break;
                    case 3:
                        assignGradeToStudent();
                        break;
                    case 4:
                        calculateOverallGradeForStudent();
                        break;
                    case 5:
                        CourseManagement.displayGradeAssignments();
                        break;
                    case 6:
                        exit = true;
                        System.out.println("Exiting...");
                        break;
                    default:
                        System.out.println("Invalid choice. Please enter a number from 1 to 6.");
                }
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number from 1 to 6.");
                scanner.next(); // Clear the invalid input
            }
        }
    }

    private static void addNewCourse() {
        System.out.println("Enter course details:");
        System.out.print("Course code: ");
        String courseCode = scanner.nextLine();
        System.out.print("Course name: ");
        String name = scanner.nextLine();
        System.out.print("Max capacity: ");
        int maxCapacity = scanner.nextInt();
        CourseManagement.addCourse(courseCode, name, maxCapacity);
        System.out.println("Course added successfully.");
    }

    private static void enrollStudent() {
        System.out.println("Enter student details:");
        System.out.print("Student name: ");
        String name = scanner.nextLine();
        System.out.print("Student ID: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        Student student = new Student(name, id);

        System.out.println("Available Courses:");
        List<Course> courses = CourseManagement.getCourses();
        for (int i = 0; i < courses.size(); i++) {
            Course course = courses.get(i);
            System.out.println(
                    (i + 1) + ". Course code: " + course.getCourseCode() + ", Course name: " + course.getName());
        }

        System.out.print("Select course to enroll (by index): ");
        int courseIndex = scanner.nextInt();
        Course course = courses.get(courseIndex - 1);

        CourseManagement.enrollStudent(student, course);
    }

    private static void assignGradeToStudent() {
        System.out.println("Enter student details:");
        System.out.print("Student name: ");
        String name = scanner.nextLine();
        System.out.print("Student ID: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        Student student = findStudentByNameAndId(name, id);
        if (student != null) {
            System.out.println("Student found: " + student.getName());
            System.out.println("Enter course details:");
            System.out.print("Course code: ");
            String courseCode = scanner.nextLine(); // Consume newline

            Course course = findCourseByCode(courseCode);
            if (course != null) {
                System.out.println("Course found: " + course.getName());
                System.out.print("Enter grade for " + student.getName() + " in course " + course.getName() + ": ");
                int grade = scanner.nextInt();

                boolean enrolled = false;
                for (Course enrolledCourse : student.getEnrolledCourses()) {
                    if (enrolledCourse.getCourseCode().equals(course.getCourseCode())) {
                        enrolled = true;
                        break;
                    }
                }

                if (enrolled) {
                    System.out.println("Student is enrolled in the specified course.");
                    CourseManagement.assignGrade(student, course, grade);
                } else {
                    System.out.println("Student is not enrolled in the specified course.");
                }
            } else {
                System.out.println("Course not found.");
            }
        } else {
            System.out.println("Student not found.");
        }
    }

    private static void calculateOverallGradeForStudent() {
        System.out.println("Enter student details:");
        System.out.print("Student name: ");
        String name = scanner.nextLine();
        System.out.print("Student ID: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        Student student = findStudentByNameAndId(name, id);
        if (student != null) {
            System.out.println("Student found: " + student.getName());
            CourseManagement.calculateOverallGrade(student);
        } else {
            System.out.println("Student not found.");
        }
    }

    private static Student findStudentByNameAndId(String name, int id) {
        for (Student student : CourseManagement.getStudents()) {
            if (student.getName().equals(name) && student.getId() == id) {
                return student;
            }
        }
        return null;
    }

    private static Course findCourseByCode(String courseCode) {
        for (Course course : CourseManagement.getCourses()) {
            if (course.getCourseCode().equals(courseCode)) {
                return course;
            }
        }
        return null;
    }
}

public class Main {
    public static void main(String[] args) {
        AdministratorInterface.displayMenu();
    }
}
